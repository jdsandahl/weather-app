{"version":3,"sources":["components/location-details.jsx","components/forecast-summary.jsx","components/forecast-list.jsx","components/forecast-details.jsx","components/search-form.jsx","components/app.js","index.js"],"names":["LocationDetails","props","className","city","country","ForecastSummary","data-testid","moment","date","format","name","iconId","icon","temperature","description","onClick","onSelect","ForecastList","forecasts","map","forecast","key","max","onForecastSelect","ForecastDetails","min","humidity","wind","speed","direction","SearchForm","useState","searchText","setSearchText","type","value","onChange","event","target","console","log","onCitySearch","App","selectedDate","setSelectedDate","setForecasts","location","setLocation","loading","setLoading","error","setError","useEffect","Axios","get","then","response","data","handleCitySearch","request","toLowerCase","catch","err","message","selectedForecast","find","render","document","getElementById"],"mappings":"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","file":"static/js/main.633dc4f5.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst LocationDetails = (props) => (\n  <h1 className=\"location-details\">{`${props.city}, ${props.country}`}</h1>\n);\n\nLocationDetails.propTypes = {\n  city: PropTypes.string.isRequired,\n  country: PropTypes.string.isRequired,\n};\n\nexport default LocationDetails;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport WeatherIcon from 'react-icons-weather';\nimport moment from 'moment';\n\nconst ForecastSummary = (props) => (\n  <div className=\"forecast-summary\">\n    <div className=\"date\" data-testid=\"date-id\">\n      <span>{moment(props.date).format('ddd Do MMM')}</span>\n    </div>\n    <div className=\"icon\" data-testid=\"icon-id\">\n      <WeatherIcon name=\"owm\" iconId={props.icon} />\n    </div>\n    <div className=\"temperature\" data-testid=\"temperature-id\">\n      <span>{props.temperature}&deg;c</span>\n    </div>\n    <div className=\"description\" data-testid=\"description-id\">\n      <span>{props.description}</span>\n    </div>\n    <button onClick={() => props.onSelect(props.date)}>More Details</button>\n  </div>\n);\n\n\nForecastSummary.propTypes = {\n  forecasts: PropTypes.shape({\n    date: PropTypes.number.isRequired,\n    temperature: PropTypes.object.isRequired,\n    description: PropTypes.string.isRequired,\n    icon: PropTypes.string.isRequired,\n  }),\n};\n\nexport default ForecastSummary;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport ForecastSummary from \"./forecast-summary\";\n\nimport '../styles/forecast-list.css';\n\nconst ForecastList = (props) => (\n  <div className=\"forecast-list\">\n    {props.forecasts.map((forecast) => (\n      <ForecastSummary\n        key={forecast.date}\n        date={forecast.date}\n        description={forecast.description}\n        icon={forecast.icon}\n        temperature={forecast.temperature.max}\n        onSelect={props.onForecastSelect}\n      />\n    ))}\n  </div>\n);\n\nForecastList.propTypes = {\n  forecasts: PropTypes.array.isRequired,\n};\n\nexport default ForecastList;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport moment from 'moment';\n\nimport '../styles/forecast-details.css';\n\nconst ForecastDetails = (props) => (\n  <div className=\"forecast-details\">\n    <div className=\"date\">\n      <h3>{moment(props.forecasts.date).format('ddd Do MMM y')}</h3>\n    </div>\n    <div className=\"max-temperature\">\n      <span>Max Temperature: {props.forecasts.temperature.max}&deg;c</span>\n    </div>\n    <div className=\"min-temperature\">\n      <span>Min Temperature: {props.forecasts.temperature.min}&deg;c</span>\n    </div>\n    <div className=\"humidity\">\n      <span>Humidity: {props.forecasts.humidity}%</span>\n    </div>\n    <div className=\"wind-speed\">\n      <span>Wind: {props.forecasts.wind.speed}mph {props.forecasts.wind.direction}</span>\n    </div>\n  </div>\n);\n\nForecastDetails.propTypes = {\n  forecasts: PropTypes.shape({\n    date: PropTypes.number.isRequired,\n    temperature: PropTypes.object.isRequired,\n    humidity: PropTypes.number.isRequired,\n    wind: PropTypes.object.isRequired,\n  }),\n};\n\nexport default ForecastDetails;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"../styles/search-form.css\";\n\nconst SearchForm = (props) => {\n  const [searchText, setSearchText] = useState(\"\");\n\n  const handleInputChange = (event) => {\n    setSearchText(event.target.value);\n    console.log(event.target.value);\n  };\n\n  return (\n    <div className=\"search-form\">\n      <input\n        type=\"text\"\n        value={searchText}\n        onChange={handleInputChange}\n      ></input>\n      <button type=\"submit\" onClick={() => props.onCitySearch(searchText)}>Search</button>\n    </div>\n  );\n};\n\nSearchForm.propTypes = {\n    onCitySearch: PropTypes.func.isRequired,\n};\n\nexport default SearchForm;\n","import React, { useState, useEffect } from \"react\";\nimport Axios from \"axios\";\nimport LocationDetails from \"./location-details\";\nimport ForecastList from \"./forecast-list\";\n\nimport \"../styles/app.css\";\nimport ForecastDetails from \"./forecast-details\";\nimport SearchForm from \"./search-form\";\n\nconst App = (props) => {\n  const [selectedDate, setSelectedDate] = useState(0);\n  const [forecasts, setForecasts] = useState([]);\n  const [location, setLocation] = useState({ city: \"\", country: \"\" });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setLoading(true);\n    setError(null);\n    Axios.get(\"https://mcr-codes-weather.herokuapp.com/forecast\").then(\n      (response) => {\n        setForecasts(response.data.forecasts);\n        setLocation(response.data.location);\n        setLoading(false);\n      }\n    );\n  }, []);\n\n  const handleCitySearch = (city) => {\n    const request = city.toLowerCase();\n\n    setLoading(true);\n    setError(null);\n\n    Axios.get(\n      `https://mcr-codes-weather.herokuapp.com/forecast?city=${request}`\n    )\n      .then((response) => {\n        setForecasts(response.data.forecasts);\n        setLocation(response.data.location);\n        setLoading(false);\n      })\n      .catch((err) => {\n        if (err.response) {\n          setLoading(false);\n          setError(`${err.message}: The city entered was not found`);\n        } else {\n          setLoading(false);\n          setError(err.message);\n        }\n      });\n  };\n\n  const selectedForecast = forecasts.find(\n    (forecast) => forecast.date === selectedDate\n  );\n\n  const handleForecastSelect = (date) => {\n    setSelectedDate(date);\n  };\n\n  if (loading && !error) {\n    return (\n      <div className=\"forecast\">\n        <h1 className=\"appLoading\">Loading the weather...</h1>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"forecast\">\n        {error && (\n          <>\n            <h2 className=\"error-message\">`{error}`</h2>\n            <SearchForm onCitySearch={handleCitySearch} />\n          </>\n        )}\n\n        {!loading && !error && (\n          <>\n            <LocationDetails city={location.city} country={location.country} />\n            \n            <SearchForm onCitySearch={handleCitySearch} />\n            \n            <ForecastList\n              forecasts={forecasts}\n              onForecastSelect={handleForecastSelect}\n            />\n\n            {selectedForecast && (\n              <ForecastDetails forecasts={selectedForecast} />\n            )}\n          </>\n        )}\n      </div>\n    );\n  }\n};\n\nexport default App;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./components/app\";\n\nrender(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}